{"version":3,"sources":["components/Header.js","components/Pagination.js","components/Movie.js","services/axios.js","components/SearchInfo.js","components/Loader.js","components/NoMoviesFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Form","className","onSubmit","onSubmitHandle","FormControl","value","searchTerm","onChange","searchOnChange","type","placeholder","Nav","NavDropdown","title","Item","Pagination","Movie","Title","Year","imdbID","Poster","Type","Card","style","width","Img","variant","src","Body","valign","axios","defaults","baseURL","interceptors","request","use","config","console","log","error","Promise","reject","response","SearchInfo","count","Loader","loader","NoMoviesFound","Jumbotron","Container","role","aria-label","App","useState","setLoader","movies","setMovies","setCount","setSearchTerm","useEffect","getMovies","get","then","data","Search","totalResults","catch","finally","event","preventDefault","target","map","movie","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d99da059.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, NavDropdown, Form, FormControl } from 'react-bootstrap';\n\nexport default function Header(props) {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand>Movie Catalog</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Form className='w-75' onSubmit={props.onSubmitHandle} >\n                    <FormControl\n                        value={props.searchTerm}\n                        onChange={props.searchOnChange}\n                        type=\"text\"\n                        placeholder=\"Search movie\"\n                        className=\"mr-sm-2\" />\n                </Form>\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Vigneshwaran\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item>Logout</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","import React from 'react'\n\nexport default function Pagination() {\n    return (\n        <div>\n            <p>Pagination</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nexport default function Movie({ Title, Year, imdbID, Poster, Type }) {\n    // console.log({ Title });\n    // console.log({ Year });\n    return (\n        <div className='col-12 col-sm-6 col-md-4 col-lg-3 mb-5 d-flex justify-content-center'>\n            <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src={Poster} />\n                <Card.Body>\n                    {/* <Card.Title>{Title}</Card.Title> */}\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td valign=\"top\" className='font-weight-bold'>Name: </td>\n                                <td>{Title}</td>\n                            </tr>\n                            <tr>\n                                <td className='font-weight-bold'>Year: </td>\n                                <td>{Year}</td>\n                            </tr>\n                            <tr>\n                                <td className='font-weight-bold'>imdbID: </td>\n                                <td>{imdbID}</td>\n                            </tr>\n                            <tr>\n                                <td className='font-weight-bold'>Type: </td>\n                                <td>{Type}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    {/* <Card.Text>\n                        <div>Name: {Title}</div>\n                        <div>Year: {Year}</div>\n                        <div>imdbID: {imdbID}</div>\n                        <div>Type: {Type}</div>\n                    </Card.Text> */}\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n","import axios from 'axios';\n\n/**\n * set baseurl for all axios request\n */\naxios.defaults.baseURL = `https://www.omdbapi.com/`;\n\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    // $('.loader-line').show();\n    console.log('start api');\n    return config;\n}, function (error) {\n    // $('.loader-line').hide();\n    console.log('end api');\n    // Do something with request error\n    return Promise.reject(error);\n});\n\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    // $('.loader-line').hide();\n    console.log('end api');\n    return response;\n}, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    // $('.loader-line').hide();\n    console.log('end api');\n    return Promise.reject(error);\n});\n\nexport default axios;","import React from 'react'\n\nexport default function SearchInfo({ count, searchTerm }) {\n    return (\n        <div className='my-4 px-5'>\n            <h4>\n                You searched for:\n                <span className='font-weight-bold'> {searchTerm}</span>,\n                <span className='font-weight-bold'> {count} </span>\n                results found\n            </h4>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Loader({ loader }) {\n    return (\n        loader ? <div className=\"loader-line\"></div> : null\n    )\n}\n","import React from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\n\nexport default function NoMoviesFound() {\n    return (\n        <Jumbotron className='my-5'>\n            <Container>\n                <h1>No movie found <span role=\"img\" aria-label='Emoji'>ðŸ˜”</span></h1>\n                <p>\n                    Please modify your search term.\n                </p>\n            </Container>\n        </Jumbotron>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/style.scss';\nimport Header from './components/Header';\nimport Pagination from './components/Pagination';\nimport Movie from './components/Movie';\nimport axios from './services/axios';\nimport SearchInfo from './components/SearchInfo';\nimport Loader from './components/Loader';\nimport NoMoviesFound from './components/NoMoviesFound';\n\nfunction App() {\n\n  const [loader, setLoader] = useState(false); // set top loader\n  const [movies, setMovies] = useState([]); // set list of movies\n  const [count, setCount] = useState(''); // set movie count info\n  const [searchTerm, setSearchTerm] = useState('batman');\n\n  // will call first time when page loads\n  useEffect(() => {\n    console.log('init');\n    getMovies(searchTerm);\n  }, []);\n\n  const getMovies = (searchTerm) => {\n    setLoader(true);\n    axios.get(`?i=tt3896198&apikey=fa281222&s=${searchTerm}&page=3`)\n      .then((response) => {\n        // handle success\n        console.log(response.data);\n        setMovies(response.data.Search);\n        setCount(response.data.totalResults);\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      })\n      .finally(() => {\n        setLoader(false);\n        // always executed\n      });\n  };\n\n  const searchOnChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const onSubmitHandle = (event) => {\n    event.preventDefault();\n    getMovies(searchTerm);\n  };\n\n  const showResults = () => {\n    if (count > 0 && movies) {\n      return (\n        <>\n          <SearchInfo count={count} searchTerm={searchTerm} />\n          <section className='container-fluid'>\n            <div className='row'>\n              {movies && movies.map((movie, i) => <Movie key={i} {...movie} />)}\n            </div>\n          </section>\n          <Pagination />\n        </>\n      )\n    }\n    return (<NoMoviesFound />)\n  }\n\n  return (\n    <div className=\"App\">\n      <Loader loader={loader} />\n      <Header\n        onSubmitHandle={onSubmitHandle}\n        searchTerm={searchTerm}\n        searchOnChange={searchOnChange} />\n      {showResults()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}