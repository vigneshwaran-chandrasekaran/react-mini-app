{"version":3,"sources":["components/Header.js","components/Image.js","components/Movie.js","services/axios.js","components/SearchInfo.js","components/Loader.js","components/Shimmer.js","components/NoMoviesFound.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Form","className","onSubmit","onSubmitHandle","FormControl","value","searchTerm","onChange","searchOnChange","type","placeholder","Nav","NavDropdown","title","Item","defaultProps","Image","src","useState","path","setPath","alt","onError","Movie","Title","Year","imdbID","Poster","Type","Card","style","width","Body","data-toggle","toUpperCase","axios","defaults","baseURL","interceptors","request","use","config","console","log","error","Promise","reject","response","SearchInfo","count","searchedKey","page","lastPage","Loader","loader","Shimmer","NoMoviesFound","Jumbotron","Container","role","aria-label","PaginationControls","pageOnChange","innerClass","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","linkClass","activeLinkClass","hideDisabled","App","setLoader","movies","setMovies","setCount","setPage","setSearchTerm","setSearchedKey","useEffect","getMovies","get","then","data","Search","totalResults","catch","finally","setTimeout","pages","event","preventDefault","target","Math","ceil","map","movie","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8aaa46f8.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, NavDropdown, Form, FormControl } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand>Movie Catalog</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Form className='w-75' onSubmit={props.onSubmitHandle} >\n                    <FormControl\n                        value={props.searchTerm}\n                        onChange={props.searchOnChange}\n                        type=\"text\"\n                        placeholder=\"Search movie\"\n                        className=\"mr-sm-2\" />\n                </Form>\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Vigneshwaran\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item>Logout</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\nHeader.defaultProps = {\n    searchTerm: 'batman',\n};\n\nHeader.propTypes = {\n    searchTerm: PropTypes.string,\n    onSubmitHandle: PropTypes.func,\n    searchOnChange: PropTypes.func\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Image = ({ src, title }) => {\n\n    const [path, setPath] = useState(src);\n\n    const handleOnError = () => {\n        // if image not loading, this function will load placeholder image\n        setPath('https://dummyimage.com/200x200/ccc/d6d6d6');\n    };\n\n    return (\n        <div className='image-box'>\n            <img\n                className='card-img-top'\n                src={path}\n                alt={title}\n                onError={handleOnError} />\n        </div>\n    )\n};\n\nImage.defaultProps = {\n    src: 'https://dummyimage.com/200x200/ccc/d6d6d6',\n    title: 'information',\n};\n\nImage.propTypes = {\n    src: PropTypes.string,\n    title: PropTypes.string,\n};\n\nexport default Image;","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport Image from './Image';\n\nconst Movie = ({ Title, Year, imdbID, Poster, Type }) => {\n    return (\n        <div className='col-12 col-sm-6 col-md-3 col-lg-3 mb-5 d-flex justify-content-center movie'>\n            <Card style={{ width: '18rem' }}>\n                <Image src={Poster} title={Title} />\n                <Card.Body>\n                    <div className='movie-name'>\n                        {Title}\n                    </div>\n                    <div className='d-flex justify-content-between my-2'>\n                        <div className='d-flex justify-content-start'>\n                            <span className=\"badge badge-warning movie-i mr-2\"\n                                data-toggle=\"tooltip\" title=\"Release year\">{Year}</span>\n                            <span data-toggle=\"tooltip\" title=\"Film genre\">{Type}</span>\n                        </div>\n                        <div className=\"badge badge-info movie-i\" data-toggle=\"tooltip\" title=\"IMDb ID\">{imdbID.toUpperCase()}</div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\n\nMovie.defaultProps = {\n    Title: '',\n    Year: '',\n    imdbID: '',\n    Poster: '',\n    Type: ''\n};\n\nMovie.propTypes = {\n    Title: PropTypes.string,\n    Year: PropTypes.string,\n    imdbID: PropTypes.string,\n    Poster: PropTypes.string,\n    Type: PropTypes.string\n};\n\nexport default Movie;\n","import axios from 'axios';\n\n/**\n * set baseurl for all axios request\n */\naxios.defaults.baseURL = `https://www.omdbapi.com/`;\n\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    console.log('request starts');\n    return config;\n}, function (error) {\n    console.log('request error');\n    // Do something with request error\n    return Promise.reject(error);\n});\n\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    console.log('request ends');\n    return response;\n}, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    console.log('response error');\n    return Promise.reject(error);\n});\n\nexport default axios;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchInfo = ({ count, searchedKey, page, lastPage }) => {\n    return (\n        <div className='my-4 px-5'>\n            <h4>\n                You searched for:\n                <span className='font-weight-bold text-muted'> {searchedKey}</span>,\n                <span className='font-weight-bold text-muted'> {count} </span>results found, showing page\n                <span className='font-weight-bold text-muted'> {page} of {lastPage} </span>\n            </h4>\n        </div>\n    )\n}\n\nSearchInfo.defaultProps = {\n    page: 1,\n    searchedKey: 'batman',\n    count: '0',\n};\n\nSearchInfo.propTypes = {\n    page: PropTypes.number,\n    lastPage: PropTypes.number,\n    searchedKey: PropTypes.string,\n    count: PropTypes.string,\n};\n\nexport default SearchInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ loader }) => {\n    return (\n        loader ? <div className=\"loader-line\"></div> : null\n    )\n}\n\nLoader.defaultProps = {\n    loader: false,\n};\n\nLoader.propTypes = {\n    loader: PropTypes.bool,\n};\n\nexport default Loader;\n","import React from 'react';\n\nconst Shimmer = () => {\n    return (\n        <div className=\"shimmer-container mt-5\">\n            <div className=\"post d-flex justify-content-around\">\n                <div className=\"avatar\"></div>\n                <div className=\"avatar\"></div>\n                <div className=\"avatar\"></div>\n                <div className=\"avatar\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Shimmer;\n","import React from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\n\nconst NoMoviesFound = () => {\n    return (\n        <Jumbotron className='my-5'>\n            <Container>\n                <h1>No movie found <span role=\"img\" aria-label='Emoji'>😔</span></h1>\n                <p>\n                    Please modify your search term.\n                </p>\n            </Container>\n        </Jumbotron>\n    )\n}\n\nexport default NoMoviesFound;","import React from 'react';\nimport Pagination from \"react-js-pagination\";\n\nconst PaginationControls = ({ pageOnChange, page, count }) => {\n    return (\n        <div className='d-flex flex-row justify-content-center flex-wrap mb-5'>\n            <Pagination\n                innerClass='pagination w-75 d-flex flex-row justify-content-center flex-wrap'\n                activePage={page}\n                itemsCountPerPage={10}\n                totalItemsCount={count}\n                pageRangeDisplayed={10}\n                onChange={pageOnChange}\n                linkClass='m-1 btn btn-info'\n                activeLinkClass='active'\n                hideDisabled={true}\n            />\n        </div>\n    )\n}\n\nexport default PaginationControls;","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/style.scss';\nimport Header from './components/Header';\nimport Movie from './components/Movie';\nimport axios from './services/axios';\nimport SearchInfo from './components/SearchInfo';\nimport Loader from './components/Loader';\nimport Shimmer from './components/Shimmer';\nimport NoMoviesFound from './components/NoMoviesFound';\nimport Pagination from './components/Pagination';\n\nconst App = () => {\n\n  const [loader, setLoader] = useState(false); // set top loader\n  const [movies, setMovies] = useState([]); // set list of movies\n  const [count, setCount] = useState(0); // set movie count info\n  const [page, setPage] = useState(1); // set movie count info\n  const [searchTerm, setSearchTerm] = useState('batman'); // to set search term\n  const [searchedKey, setSearchedKey] = useState('batman'); // to set search term\n\n  /**\n   * will call first time when page loads, then when ever page changes\n   */\n  useEffect(() => {\n    getMovies();\n  }, [page]);\n\n\n  /**\n   * search keyword and get the results\n   */\n  const getMovies = () => {\n    setLoader(true);\n    axios.get(`?i=tt3896198&apikey=fa281222&s=${searchTerm}&page=${page}`)\n      .then((response) => {\n        // handle success\n        setMovies(response.data.Search);\n        setCount(response.data.totalResults);\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      })\n      .finally(() => {\n        // to increase curiosity for users\n        setTimeout(() => {\n          setLoader(false);\n        }, 1000);\n        // always executed\n      });\n  };\n\n  /**\n   *\n   * when ever we search the movie, update the searched term with our local state key\n   */\n  const searchOnChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  /**\n   *\n   * on movie search enter event handler, set searched keyword and inititate api call\n   */\n  const onSubmitHandle = (event) => {\n    event.preventDefault();\n    setSearchedKey(searchTerm);\n    getMovies();\n  };\n\n  /**\n   *\n   * every time pagination button clicked this event will invoke\n   */\n  const pageOnChange = (pages) => {\n    setPage(pages);\n  };\n\n  /**\n   * based on total count of movie this will return last page number in pagination\n   */\n  const lastPage = () => {\n    return Math.ceil(count / 10);\n  };\n\n  /**\n   * this section will return 3 main section\n   * 1. on api call search time will return shimmer loader\n   * 2. if we have valid results will retrun results section\n   * 3. if there is no movie available for search keyword will return NoMovie error component\n   */\n  const showResults = () => {\n\n    /**\n     * Shimmer Loader\n     */\n    if (loader) {\n      return (<Shimmer />);\n    }\n\n    if (count > 0 && movies) {\n      /**\n      * Result sectioin\n      */\n      return (\n        <>\n          <SearchInfo count={count} searchedKey={searchedKey} page={page} lastPage={lastPage()} />\n          <section className='container-fluid'>\n            <div className='row'>\n              {movies && movies.map((movie, i) => <Movie key={i} {...movie} />)}\n            </div>\n          </section>\n          <Pagination page={page} count={count} pageOnChange={pageOnChange} />\n        </>\n      )\n    }\n    /**\n    * No Result sectioin\n    */\n    return (<NoMoviesFound />)\n  }\n\n  return (\n    <div className=\"App\">\n      <Loader loader={loader} />\n      <Header\n        onSubmitHandle={onSubmitHandle}\n        searchTerm={searchTerm}\n        searchOnChange={searchOnChange} />\n\n      {showResults()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}