{"version":3,"sources":["components/Header.js","components/Pagination.js","components/Movie.js","services/axios.js","components/SearchInfo.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Form","className","FormControl","type","placeholder","Nav","NavDropdown","title","Item","Pagination","Movie","Title","Year","imdbID","Poster","Card","style","width","Img","variant","src","Body","Text","axios","defaults","baseURL","interceptors","request","use","config","console","log","error","Promise","reject","response","SearchInfo","searchInfo","App","useState","movies","setMovies","setSearchInfo","useEffect","get","then","data","Search","totalResults","catch","finally","map","movie","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAGe,SAASA,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,iBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACZ,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASH,UAAU,aAE5D,kBAACI,EAAA,EAAD,CAAKJ,UAAU,WACX,kBAACK,EAAA,EAAD,CAAaC,MAAM,eAAeR,GAAG,sBACjC,kBAACO,EAAA,EAAYE,KAAb,CAAkBb,KAAK,KAAvB,cCZT,SAASc,IACpB,OACI,6BACI,0C,aCFG,SAASC,EAAT,GAAiD,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAGjD,OACI,yBAAKb,UAAU,wBACX,kBAACc,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,IAC7B,kBAACC,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKJ,MAAN,KAAaA,GACb,kBAACI,EAAA,EAAKO,KAAN,KACKV,EADL,IACYC,EADZ,2F,qBCPpBU,IAAMC,SAASC,QAAf,0BAGAF,IAAMG,aAAaC,QAAQC,KAAI,SAAUC,GAIrC,OADAC,QAAQC,IAAI,aACLF,KACR,SAAUG,GAIT,OAFAF,QAAQC,IAAI,WAELE,QAAQC,OAAOF,MAK1BT,IAAMG,aAAaS,SAASP,KAAI,SAAUO,GAKtC,OADAL,QAAQC,IAAI,WACLI,KACR,SAAUH,GAKT,OADAF,QAAQC,IAAI,WACLE,QAAQC,OAAOF,MAGXT,QAAf,EClCe,SAASa,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WAEjC,OADAP,QAAQC,IAAI,CAAEM,eAEV,yBAAKpC,UAAU,QACX,yDAA+BoC,EAA/B,mBC4CGC,MAzCf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGuBF,mBAAS,IAHhC,mBAGNF,EAHM,KAGMK,EAHN,KA2Bb,OAtBAC,qBAAU,WACRb,QAAQC,IAAI,QAKZR,EAAMqB,IAAN,+CACGC,MAAK,SAACV,GAELL,QAAQC,IAAII,EAASW,MACrBL,EAAUN,EAASW,KAAKC,QACxBL,EAAcP,EAASW,KAAKE,iBAE7BC,OAAM,SAACjB,GAENF,QAAQC,IAAIC,MAEbkB,SAAQ,iBAdV,IAoBD,yBAAKjD,UAAU,OACb,kBAACX,EAAD,MACA,kBAAC8C,EAAD,CAAYC,WAAYA,IACxB,6BAASpC,UAAU,mBACjB,yBAAKA,UAAU,OACZuC,GAAUA,EAAOW,KAAI,SAACC,EAAOC,GAAR,OAAc,kBAAC3C,EAAD,eAAO4C,IAAKD,GAAOD,SAG3D,kBAAC3C,EAAD,QCjCc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.8832acd2.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, NavDropdown, Form, FormControl } from 'react-bootstrap';\n\nexport default function Header() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#\">Movie Catalog</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Form className='w-75'>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                </Form>\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Vigneshwaran\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#\">Logout</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","import React from 'react'\n\nexport default function Pagination() {\n    return (\n        <div>\n            <p>Pagination</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nexport default function Movie({ Title, Year, imdbID, Poster }) {\n    // console.log({ Title });\n    // console.log({ Year });\n    return (\n        <div className='col-12 col-md-3 mb-5'>\n            <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src={Poster} />\n                <Card.Body>\n                    <Card.Title>{Title}</Card.Title>\n                    <Card.Text>\n                        {Year} {imdbID} example text to build on the card title and make up the bulk of\n                            the card's content.\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n","import axios from 'axios';\n\n/**\n * set baseurl for all axios request\n */\naxios.defaults.baseURL = `http://www.omdbapi.com/`;\n\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    // $('.loader-line').show();\n    console.log('start api');\n    return config;\n}, function (error) {\n    // $('.loader-line').hide();\n    console.log('end api');\n    // Do something with request error\n    return Promise.reject(error);\n});\n\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    // $('.loader-line').hide();\n    console.log('end api');\n    return response;\n}, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    // $('.loader-line').hide();\n    console.log('end api');\n    return Promise.reject(error);\n});\n\nexport default axios;","import React from 'react'\n\nexport default function SearchInfo({ searchInfo }) {\n    console.log({ searchInfo });\n    return (\n        <div className='my-5'>\n            <h4>You searched for: Batman, {searchInfo} results found</h4>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './components/Header';\nimport Pagination from './components/Pagination';\nimport Movie from './components/Movie';\nimport axios from './services/axios';\nimport SearchInfo from './components/SearchInfo';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]);\n  const [searchInfo, setSearchInfo] = useState('');\n\n  useEffect(() => {\n    console.log('init');\n    getMovies();\n  }, []);\n\n  function getMovies() {\n    axios.get(`?i=tt3896198&apikey=fa281222&s=magic&page=3`)\n      .then((response) => {\n        // handle success\n        console.log(response.data);\n        setMovies(response.data.Search);\n        setSearchInfo(response.data.totalResults);\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      })\n      .finally(() => {\n        // always executed\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchInfo searchInfo={searchInfo} />\n      <section className='container-fluid'>\n        <div className='row'>\n          {movies && movies.map((movie, i) => <Movie key={i} {...movie} />)}\n        </div>\n      </section>\n      <Pagination />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}